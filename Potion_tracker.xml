<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient>
<!-- Saved on Saturday, May 24, 2025, 1:51 PM -->
<!-- MuClient version 5.07-pre -->

<!-- Plugin "Potion_tracker" generated by Plugin Wizard -->

<muclient>
<plugin
   name="Potion_tracker"
   author="Khrysis"
   id="9c1c367c95e1d469f201ed44"
   language="Lua"
   purpose="track potions and countdown remaining"
   save_state="y"
   date_written="2025-05-24 13:46:46"
   requires="5.07"
   version="1.0"
  >
</plugin>

       <!--  Aliases to turn window on or off  -->
    <aliases>
    <alias
      match="^pt help$"
      enabled="y"
      script="ShowHelp"
      regexp="y"
      sequence="3"
    >
    </alias>
	<alias 
	 match="^pt reset$"
	 enabled="y"
	 script="ResetPotions"
	 regexp="y"
	 sequence="2"
	 >
	</alias>
	<alias
     match="^pt hide$"
	 enabled="y"
	 regexp="y"
	 script="hide_mw"
	 sequence="1"
    >
    </alias>
    <alias
     match="^pt show$"
	 enabled="y"
	 regexp="y"
	 script="show_mw"
	 sequence="1"
    >
    </alias>
  </aliases>
	
	<triggers>
    <!-- Trigger for buying potions -->
    <trigger
      enabled="y"
      match="You buy (\d+) \* (.+?) from .+ for [\d,]+ gold\."
      script="OnBuyPotion"
      regexp="y"
	  sequence="1"
    />

    <!-- Trigger for using potions -->
    <trigger
      enabled="y"
      match="You quaff (.+)\."
      script="OnUsePotion"
      regexp="y"
	  sequence="3"
    />
	<trigger
      enabled="y"
      match="You buy (.+?) from .+ for [\d,]+ gold\."
      script="OnBuySinglePotion"
      regexp="y"
	  sequence="2"
    />

  </triggers>

  <script>
    <![CDATA[
	
	require "themed_miniwindows"

    local my_window = ThemedTextWindow("testpotiontrackerwindow", 200, 200, 200, 200, "Potion Tracker", "center", false, true, true, false, false, false, false, Dina, 10, Dina, 10, 1000, 5, true, false)
    
	potion_inventory = potion_inventory or {}
	
	  -- Hide the miniwindow
	function hide_mw()
		my_window:hide()
	end
	
	-- Show the miniwindow
	function show_mw()
		my_window:show()
	end

    function OnPluginSaveState()
      -- Save the inventory when plugin state is saved
      SetVariable("potion_inventory", serialize.save("potion_inventory"))
    end

    function OnPluginInstall()
      local saved = GetVariable("potion_inventory")
      if saved then
        potion_inventory = serialize.load(saved) or {}
      end
	  show_mw()
	  refresh_miniwindow()
	  ShowHelp() -- show help on install
    end
    
	function normalize_potion_name(name)
      name = name:gsub("^%s*", "")       -- Trim leading space
      name = name:gsub("%s*$", "")       -- Trim trailing space

      -- Only remove "A " or "An " if followed by a capital letter (simple heuristic)
      if name:match("^A[n]? %u") then
        name = name:gsub("^A[n]? ", "")
      end

      return name
    end

    function OnBuySinglePotion(name, line, wildcards)
      local raw_name = wildcards[1]
      local potion_name = normalize_potion_name(raw_name)

      potion_inventory[potion_name] = (potion_inventory[potion_name] or 0) + 1
      Note("Bought 1 of " .. potion_name .. ". Total: " .. potion_inventory[potion_name])
      refresh_miniwindow()
    end
	
	function OnBuyPotion(name, line, wildcards)
      local amount = tonumber(wildcards[1])
      local raw_name = wildcards[2]
      local potion_name = normalize_potion_name(raw_name)

      potion_inventory[potion_name] = (potion_inventory[potion_name] or 0) + amount
      Note("Bought " .. amount .. " of " .. potion_name .. ". Total: " .. potion_inventory[potion_name])
      refresh_miniwindow()
    end

    function OnUsePotion(name, line, wildcards)
      local raw_name = wildcards[1]
      local potion_name = normalize_potion_name(raw_name)

      if potion_inventory[potion_name] then
        potion_inventory[potion_name] = potion_inventory[potion_name] - 1

        if potion_inventory[potion_name] <= 0 then
          potion_inventory[potion_name] = nil
          Note("Used last " .. potion_name .. ". Removed from inventory.")
        else
          Note("Used one " .. potion_name .. ". Remaining: " .. potion_inventory[potion_name])
        end
      else
        Note("Used untracked potion: " .. potion_name)
      end

      refresh_miniwindow()
    end
	
	function ResetPotions()
      potion_inventory = {}
      SetVariable("potion_inventory", serialize.save("potion_inventory"))
      Note("Potion inventory reset.")
      refresh_miniwindow()
    end

	
	function refresh_miniwindow()
  my_window:clear()
  my_window:add_text("@WPotion Inventory:\n")

  local any = false
  for potion, count in pairs(potion_inventory) do
    local color = "@G"
    if count <= 4 then
      color = "@R"
    elseif count <= 9 then
      color = "@M"
    elseif count <= 14 then
      color = "@Y"
    end

    my_window:add_text(string.format("%s%s: %d\n", color, potion, count))
    any = true
  end

  if not any then
    my_window:add_text("@WNo potions tracked.\n")
  end

  my_window:draw()
end

    function ShowHelp()
      local helptext = [[
    Potion Tracker Plugin - Commands:
      pt show      - Show the miniwindow
      pt hide      - Hide the miniwindow
      pt reset     - Reset tracked potions
      pt help      - Show this help message

    Potions are tracked automatically when you buy or quaff them.
    The miniwindow color-codes quantities:
      @R0-4   @M5-9   @Y10-14   @G15+
  
    Potion data is saved between sessions.
    ]]
      ColourNote("yellow", "", helptext)
    end


    -- Serialization helpers
    serialize = {
      save = function(name)
        local t = {}
        for k, v in pairs(_G[name]) do
          t[#t + 1] = string.format("[%q]=%d", k, v)
        end
        return "return {" .. table.concat(t, ",") .. "}"
      end,

      load = function(data)
        local f = loadstring(data)
        if f then
          return f()
        end
        return {}
      end

    }
    ]]>
  </script>
</muclient>