<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient>
<!-- Saved on Saturday, May 24, 2025, 1:51 PM -->
<!-- MuClient version 5.07-pre -->

<!-- Plugin "Potion_tracker" generated by Plugin Wizard -->

<muclient>
<plugin
   name="Potion_tracker"
   author="Khrysis"
   id="9c1c367c95e1d469f201ed44"
   language="Lua"
   purpose="track potions and countdown remaining"
   save_state="y"
   date_written="2025-05-24 13:46:46"
   requires="5.071"
   version="1.06"
  >
</plugin>

    <aliases>
	<alias
      match="^ptw kw add (.+) (.+)$"
      enabled="y"
      regexp="y"
      script="SetPotionAlias"
    >
	</alias>
	<alias
      match="^ptw kw remove (.+)$"
      enabled="y"
      regexp="y"
      script="RemovePotionAlias"
    >
	</alias>
	<alias
      match="^ptw font (\d+)$"
      enabled="y"
      regexp="y"
      script="SetFontSize"
    >
    </alias>
	<alias
      match="^ptw untracked (on|off)$"
      enabled="y"
      regexp="y"
      script="ToggleUntrackedMessages"
    >
    </alias>
	<alias
      match="^ptw color reset$"
      enabled="y"
      regexp="y"
      script="ResetColorThresholds"
    >
    </alias>
	<alias
      match="^ptw color (\d+) (\d+) (\d+)$"
      enabled="y"
      regexp="y"
      script="SetColorThresholds"
    >
    </alias>
	<alias
      match="^ptw set (.+) (\d+)$"
      enabled="y"
      regexp="y"
      script="SetPotionCount"
    >
    </alias>
	<alias
      match="^ptw remove (.+)$"
      enabled="y"
      script="RemoveApprovedPotion"
      regexp="y"
    >
    </alias>
	<alias
      match="^ptw list$"
      enabled="y"
      script="ListApprovedPotions"
      regexp="y"
    >
    </alias>
	<alias
      match="^ptw add (.+)$"
      enabled="y"
      script="AddApprovedPotion"
      regexp="y"
      sequence="3"
    >
    </alias>
    <alias
      match="^ptw help$"
      enabled="y"
      script="ShowHelp"
      regexp="y"
      sequence="3"
    >
	</alias>
	<alias 
      match="ptw update check" 
      enabled="y" 
      script="update_check_alias" 
      sequence="99"
      >
     </alias>  
     <alias 
      match="ptw update install" 
      enabled="y" 
      script="update_install_alias" 
      sequence="99"
      >
    </alias>
	<alias 
	 match="^ptw reset$"
	 enabled="y"
	 script="ResetPotions"
	 regexp="y"
	 sequence="2"
	 >
	</alias>
	
	       <!--  Aliases to turn window on or off  -->
	<alias
     match="^ptw hide$"
	 enabled="y"
	 regexp="y"
	 script="hide_mw"
	 sequence="1"
    >
    </alias>
    <alias
     match="^ptw show$"
	 enabled="y"
	 regexp="y"
	 script="show_mw"
	 sequence="1"
    >
    </alias>
  </aliases>
	
	<triggers>
    <!-- Trigger for buying potions -->
    <trigger
      enabled="y"
      match="^You buy (\d+) \* (.+?) from .+ for [\d,]+ gold\.$"
      script="OnBuyPotion"
      regexp="y"
	  sequence="1"
    />

    <!-- Trigger for using potions -->
    <trigger
      enabled="y"
      match="^You (?:quaff|eat) (.+?)\.$"
      script="OnUsePotion"
      regexp="y"
	  sequence="3"
    />
	<trigger
      enabled="y"
      match="^You buy (.+?) from .+ for [\d,]+ gold\.$"
      script="OnBuySinglePotion"
      regexp="y"
	  sequence="2"
    />

  </triggers>

  <script>
    <![CDATA[
	
	require "themed_miniwindows"

    local my_window = ThemedTextWindow("testpotiontrackerwindow", 200, 200, 200, 200, "Potion Tracker", "center", false, true, true, false, false, false, false, Dina, font_size, Dina, font_size, 1000, 5, true, false)
    
	show_untracked_messages = GetVariable("show_untracked_messages") ~= "false"
	approved_potions = approved_potions or {}
	potion_inventory = potion_inventory or {}
	color_thresholds = color_thresholds or { low = 4, medium = 9, high = 14 }
	potion_aliases = potion_aliases or {}
	
	  -- Hide the miniwindow
	function hide_mw()
		my_window:hide()
	end
	
	-- Show the miniwindow
	function show_mw()
		my_window:show()
	end

    function SetFontSize(name, line, wildcards)
      local new_size = tonumber(wildcards[1])
      if not new_size or new_size < 6 or new_size > 32 then
        Note("Please enter a font size between 6 and 32.")
        return
      end

      font_size = new_size
      SetVariable("font_size", tostring(font_size))

      -- Recreate the window with the new font size
      my_window = ThemedTextWindow(
        "testpotiontrackerwindow", 200, 200, 200, 200,
        "Potion Tracker", "center",
        false, true, true, false, false, false, false,
        Dina, font_size, Dina, font_size,
        1000, 5, true, false
      )

      refresh_miniwindow()
      Note("Font size set to " .. font_size)
	  my_window:show()
    end


	
	function OnPluginSaveState()
      -- Save the inventory when plugin state is saved
      SetVariable("potion_inventory", serialize.save("potion_inventory"))
	  SetVariable("potion_aliases", serialize.save("potion_aliases"))
	  SetVariable("color_thresholds", serialize.save("color_thresholds"))
    end

    function OnPluginInstall()
      local saved_inventory = GetVariable("potion_inventory")
      local saved_aliases = GetVariable("potion_aliases")
    if saved_aliases then
      potion_aliases = serialize.load(saved_aliases) or {}
    end
	  local saved_thresholds = GetVariable("color_thresholds")
      if saved_thresholds then
        color_thresholds = serialize.load(saved_thresholds) or color_thresholds
    end
	  if saved_inventory then
        potion_inventory = serialize.load(saved_inventory) or {}
      end

      local saved_approved = GetVariable("approved_potions")
      if saved_approved then
        approved_potions = serialize.load(saved_approved) or {}
      end

      show_mw()
      refresh_miniwindow()
      ShowHelp()
    end

    function ToggleUntrackedMessages(name, line, wildcards)
      local mode = wildcards[1]
      show_untracked_messages = (mode == "on")
      SetVariable("show_untracked_messages", tostring(show_untracked_messages))
      Note("Untracked message display is now " .. (show_untracked_messages and "ON" or "OFF"))
    end

	function ResetColorThresholds()
      color_thresholds = { low = 4, medium = 9, high = 14 }
      SetVariable("color_thresholds", serialize.save("color_thresholds"))
      Note("Color thresholds reset to default: low=4, medium=9, high=14")
      refresh_miniwindow()
    end

	function SetColorThresholds(name, line, wildcards)
      local low = tonumber(wildcards[1])
      local medium = tonumber(wildcards[2])
      local high = tonumber(wildcards[3])

      if not (low and medium and high) then
        Note("Invalid numbers. Usage: pt color <low> <medium> <high>")
        return
      end

      if not (low < medium and medium < high) then
        Note("Thresholds must be increasing: low < medium < high")
        return
      end

      color_thresholds.low = low
      color_thresholds.medium = medium
      color_thresholds.high = high

      SetVariable("color_thresholds", serialize.save("color_thresholds"))
      Note(string.format("Color thresholds set to: low=%d, medium=%d, high=%d", low, medium, high))
      refresh_miniwindow()
    end


	function SetPotionAlias(name, line, wildcards)
      local full_name = normalize_potion_name(wildcards[1])
      local alias = wildcards[2]

      if not approved_potions[full_name] then
        Note("Potion not approved: " .. full_name)
        return
      end

      potion_aliases[full_name] = alias
      SetVariable("potion_aliases", serialize.save("potion_aliases"))
      Note("Set keyword '" .. alias .. "' for potion '" .. full_name .. "'")
      refresh_miniwindow()
    end

    function RemovePotionAlias(name, line, wildcards)
      local full_name = normalize_potion_name(wildcards[1])

      if potion_aliases[full_name] then
        potion_aliases[full_name] = nil
        SetVariable("potion_aliases", serialize.save("potion_aliases"))
        Note("Removed keyword for potion: " .. full_name)
        refresh_miniwindow()
      else
        Note("No keyword set for: " .. full_name)
      end
    end

	function SetPotionCount(name, line, wildcards)
      local raw_name = wildcards[1]
      local count = tonumber(wildcards[2])
      local potion_name = normalize_potion_name(raw_name)

      if not approved_potions[potion_name] then
        Note("Potion '" .. potion_name .. "' is not approved. Use 'pt add " .. potion_name .. "' first.")
        return
      end

      potion_inventory[potion_name] = count
      SetVariable("potion_inventory", serialize.save("potion_inventory"))
      Note("Set '" .. potion_name .. "' count to " .. count)
      refresh_miniwindow()
    end

	
	function AddApprovedPotion(name, line, wildcards)
      local potion = normalize_potion_name(wildcards[1])
      approved_potions[potion] = true
      SetVariable("approved_potions", serialize.save("approved_potions"))
      Note("Added '" .. potion .. "' to approved potions list.")
    end
	
	function ListApprovedPotions()
      Note("Approved Potions List:")
      local any = false
      for name in pairs(approved_potions) do
        Note("  - " .. name)
         any = true
      end
      if not any then
        Note("  (None)")
      end
    end

	function RemoveApprovedPotion(name, line, wildcards)
      local potion = normalize_potion_name(wildcards[1])
      if approved_potions[potion] then
        approved_potions[potion] = nil
        SetVariable("approved_potions", serialize.save("approved_potions"))
        Note("Removed '" .. potion .. "' from approved list.")
      else
        Note("Potion not in approved list: " .. potion)
      end
    end

	
	function normalize_potion_name(name)
      name = name:gsub("^%s*", "")       -- Trim leading space
      name = name:gsub("%s*$", "")       -- Trim trailing space

      -- Only remove "A " or "An " if followed by a capital letter (simple heuristic)
      if name:match("^A[n]? %u") then
        name = name:gsub("^A[n]? ", "")
      end

      return name
    end

    function OnBuySinglePotion(name, line, wildcards)
      local raw_name = wildcards[1]
      local potion_name = normalize_potion_name(raw_name)

      if not approved_potions[potion_name] then
        if show_untracked_messages then
          Note("Ignoring unapproved item: " .. potion_name)
        end
        return
      end

      potion_inventory[potion_name] = (potion_inventory[potion_name] or 0) + 1
      Note("Bought 1 of " .. potion_name .. ". Total: " .. potion_inventory[potion_name])
      refresh_miniwindow()
    end
	
	function OnBuyPotion(name, line, wildcards)
      local amount = tonumber(wildcards[1])
      local raw_name = wildcards[2]
      local potion_name = normalize_potion_name(raw_name)
      
	  if not approved_potions[potion_name] then
        if show_untracked_messages then
          Note("Ignoring unapproved item: " .. potion_name)
        end
        return
      end
	  
      potion_inventory[potion_name] = (potion_inventory[potion_name] or 0) + amount
      Note("Bought " .. amount .. " of " .. potion_name .. ". Total: " .. potion_inventory[potion_name])
      refresh_miniwindow()
    end

    function OnUsePotion(name, line, wildcards)
      local raw_name = wildcards[1]
      local potion_name = normalize_potion_name(raw_name)

      if not approved_potions[potion_name] then
        if show_untracked_messages then
          Note("Ignoring unapproved item: " .. potion_name)
        end
        return
      end

      if potion_inventory[potion_name] then
        potion_inventory[potion_name] = potion_inventory[potion_name] - 1

        if potion_inventory[potion_name] <= 0 then
          potion_inventory[potion_name] = nil
          Note("Used last " .. potion_name .. ". Removed from inventory.")
        else
          Note("Used one " .. potion_name .. ". Remaining: " .. potion_inventory[potion_name])
        end
      else
        Note("Used untracked potion: " .. potion_name)
      end

      refresh_miniwindow()
    end
	
	function ResetPotions()
      potion_inventory = {}
      SetVariable("potion_inventory", serialize.save("potion_inventory"))
      Note("Potion inventory reset.")
      refresh_miniwindow()
    end

	
	function refresh_miniwindow()
      my_window:clear()
      my_window:add_text("@WPotion Inventory:\n")

      local any = false
      for potion, count in pairs(potion_inventory) do
        local color = "@G"
        local low = color_thresholds.low
        local med = color_thresholds.medium
        local high = color_thresholds.high
        local display_name = potion_aliases[potion] or potion

        if count <= low then
          color = "@R"
        elseif count <= med then
          color = "@M"
        elseif count <= high then
          color = "@Y"
        end

        my_window:add_text(string.format("%s%s: %d\n", color, display_name, count))
        any = true
      end

      if not any then
        my_window:add_text("@WNo potions tracked.\n")
      end

      my_window:draw()
    end

    function ShowHelp()
      local helptext = [[
    Potion Tracker Plugin - Commands:
      ptw show      - Show the miniwindow
      ptw hide      - Hide the miniwindow
      ptw reset     - Reset tracked potions
      ptw help      - Show this help message
      ptw add <name>         - Add a potion name to the approved list
      ptw set <name> <count> - Set count of an approved potion
      ptw remove <name>      - Remove a potion name from the approved list
      ptw list               - Show approved potion names
      ptw update check       - Checks for new version
      ptw update install     - Installs new version
      ptw untracked on|off   - Show or hide notices for untracked potions
      ptw font <size>        - Set font size for potion window (6-32)
      ptw kw add <full name> <keyword>    - Assign a keyword to a potion
      ptw kw remove <full name>           - Remove an keyword for a potion
	  
      ptw color reset                 - Reset color thresholds to default values  
      ptw color <low> <medium> <high> - Set custom color thresholds for inventory (must be increasing)
        ptw color 3 7 12 will make:
                                  Red: 0-3
                                  Magenta: 4-7
                                  Yellow: 8-12
                                  Green: 13+


    Potions are tracked automatically when you buy or quaff them.
    The miniwindow color-codes quantities:
      @R0-4   @M5-9   @Y10-14   @G15+
  
    Potion data is saved between sessions.
    ]]
      ColourNote("yellow", "", helptext)
    end


    -- Serialization helpers
    
	serialize = {
      save = function(name)
        local t = {}
        for k, v in pairs(_G[name]) do
          local value_str
          if type(v) == "number" then
            value_str = tostring(v)
          elseif type(v) == "boolean" then
            value_str = tostring(v)
          else
            value_str = string.format("%q", tostring(v))
          end
          t[#t + 1] = string.format("[%q]=%s", k, value_str)
        end
        return "return {" .. table.concat(t, ",") .. "}"
      end,

      load = function(data)
        local f = loadstring(data)
        if f then
          return f()
        end
        return {}
      end
    }

	
	 ----------------------- Plugin Update Code -----------------------
 -- Code taken from Durel's dinv plugin, originally via Crowley
 require("wait")
require("async")
json = require("json")

 plugin_url = "https://raw.githubusercontent.com/Khrysis-aard/plugins/refs/heads/main/Potion_tracker.xml"
 SetVariable("DownloadURL", plugin_url)
 plugin_protocol = "HTTPS"
 plugin_prefix = "[Potion_tracker]"
 
 function update_check_alias()
     update_plugin("check")
     ColourNote("yellow", "", plugin_prefix .. "","white",""," Checking for updated version...")
 end
 
 function update_install_alias()
     update_plugin("install")
     ColourNote("yellow", "", plugin_prefix .. "","white",""," Checking for and installing updated version...")
 end
 
 function reload_plugin()
     local scriptPrefix = GetAlphaOption("script_prefix")
     local retval
 
     -- If the user has not already specified the script prefix for this version of mush, pick a
     -- reasonable default value
     if (scriptPrefix == "") then
         scriptPrefix = "\\\\\\"
         SetAlphaOption("script_prefix", scriptPrefix)
     end
 
     -- Tell mush to reload the plugin in one second.  We can't do it directly here because a
     -- plugin can't unload itself.  Even if it could, how could it tell mush to load it again
     -- if it weren't installed? 
     retval = Execute(scriptPrefix.."DoAfterSpecial(0.1, \"ReloadPlugin('"..GetPluginID().."')\", sendto.script)")
 end
 
 function update_plugin(mode)
     update_mode = mode
 
     wait.make(get_plugin_file)
 end
 
 function get_plugin_file()
     local urlThread = async.request(plugin_url, plugin_protocol)
 
     if not urlThread then
         note_error("Couldn't create async url request.")
         return
     end
 
     local timeout = 10
     local totTime = 0
     while (urlThread:alive() and totTime < timeout) do
         wait.time(0.1)
         totTime = totTime + 0.1
     end
 
     local remoteRet, pluginData, status, headers, fullStatus = urlThread:join()
 
     if not status then
         ColourNote("red", "", plugin_prefix .. " Couldn't download plugin file. No status code.")
         
         return
     end
 
     if (status ~= 200) then
         ColourNote("red", "", plugin_prefix .. " Plugin file request status code: " .. status .. ": " .. fullStatus)
         return
     end
     
     local currentVersion = GetPluginInfo(GetPluginID(), 19) or 0
     local currentVerStr  = string.format("%1.3f", currentVersion)
     local remoteVerStr   = string.match(pluginData, '%s%s+version="([0-9%.]+)"')
     local remoteVersion  = tonumber(remoteVerStr or "") or 0
 
     if remoteVersion == currentVersion then
         ColourNote("yellow", "", plugin_prefix .. "","white",""," You are running the most recent version. (","cyan","","v" .. currentVerStr .. "","white","",")")
     elseif (remoteVersion < currentVersion) then
         ColourNote("yellow", "", plugin_prefix .. "","white",""," You have a newer version than is publicly available. (","cyan","","v" .. currentVerStr .. "","white","",")")
     elseif (update_mode == "check") then
         ColourNote("yellow", "", plugin_prefix .. "","white",""," You are running ","cyan","","v" .. currentVerStr .. "","white",""," , but there's a newer version ","cyan","","v" .. remoteVerStr)
     elseif (update_mode == "install") then
         ColourNote("yellow", "", plugin_prefix .. "","white",""," Updating plugin from version ","cyan","", currentVerStr .. "","white",""," to version ","cyan","", remoteVerStr .."") 
 
         local pluginFile = GetPluginInfo(GetPluginID(), 6)
         local file = io.open(pluginFile, "wb")
         file:write(pluginData)
         file:close()
         reload_plugin()
     else
         ColourNote("red", "", plugin_prefix .. " Invalid update mode: " .. update_mode)
     end
 end
 ----------------------- End Plugin Update Code -----------------------
    ]]>
  </script>
</muclient>
